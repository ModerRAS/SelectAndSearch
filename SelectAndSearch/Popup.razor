@using SelectAndSearch.Common.Managers;
@using SelectAndSearch.Common.Models;
@using SelectAndSearch.Common.Services;
@using SearchOption = SelectAndSearch.Common.Models.SearchOption;
@inherits LayoutComponentBase
@inject SearchService searchService;
@inject IJSRuntime JsRuntime

<MApp>

    <!-- 根据应用组件来调整你的内容 -->
    <MMain>
        <!-- 给应用提供合适的间距 -->
        <MContainer Fluid>
            <SelectAndSearch.Pages.Components.QuestionList Questions="_items"></SelectAndSearch.Pages.Components.QuestionList>
            <div>
                @SearchService.option.SearchText
            </div>
        </MContainer>
    </MMain>

</MApp>






@code {
    private List<Question> _items = new();
    private System.Timers.Timer timer = new(250);
    private SearchOption searchOption { get; set; }
    protected override void OnInitialized() {
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        timer.Start();
    }
    private void OnTimerCallback() {
        _ = InvokeAsync(async () => {
            await Update();
        });
    }
    private async Task Update() {
        try {
            if (searchOption is null || !searchOption.SearchText.Equals(SearchService.option.SearchText)) {
                searchOption = searchService.Execute();
                _items = searchOption.Questions;
                await JsRuntime.InvokeVoidAsync("ScrollToTop");
                StateHasChanged();
            }
        } catch (Exception e) {
            Console.WriteLine(e);
        }
        
    }
    public void Dispose() => timer.Dispose();
}
