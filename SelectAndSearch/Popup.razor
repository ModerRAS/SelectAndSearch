@using SelectAndSearch.Models;
@inherits LayoutComponentBase

<MApp>

    <!-- 根据应用组件来调整你的内容 -->
    <MMain>
        <!-- 给应用提供合适的间距 -->
        <MContainer Fluid>
            <MCard Width="500"
                   Height="140"
                   Class="overflow-auto"
                   Style="margin: 0 0"
                   @ref="_card">
                <MList>
                    @foreach (var item in _items) {
                        <MListItem>
                            <MListItemContent>
                                <MListItemTitle>
                                    <SelectAndSearch.Pages.Components.QuestionComponent Question="@item"></SelectAndSearch.Pages.Components.QuestionComponent>
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>
                        <MDivider />
                    }
                </MList>
                <MInfiniteScroll OnLoad="@OnLoad"
                                 Parent="@_card.Ref">
                </MInfiniteScroll>
            </MCard>
        </MContainer>
    </MMain>

</MApp>






@code {
    private Question item { get; set; } = new Question()
        {
            Title = "这是标题",
            Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
            CorrectAnswer = "A",
            Remark = "无",
            Type = QuestionType.Single
        };
    private MCard? _card;
    private int _count;
    private bool _mockError;
    private List<Question> _items = new();

    private async Task OnLoad(InfiniteScrollLoadEventArgs args) {
        var append = await MockRequest();

        args.Status = append.Count == 0 ? InfiniteScrollLoadStatus.Empty : InfiniteScrollLoadStatus.Ok;

        _items.AddRange(append);
    }

    private async Task<List<Question>> MockRequest() {
        if (_count >= 3) {
            return new List<Question>();
        }

        await Task.Delay(2000);

        if (_count == 1 && !_mockError) {
            _mockError = true;
            throw new TimeoutException("Mock error");
        }

        _count++;

        return new List<Question>() {
            new Question() {
                Title = "这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题这是很长的标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            },
            new Question() {
                Title = "这是标题",
                Answers = new List<string>() {
                    "选项1",
                    "选项2",
                    "选项3"
                },
                CorrectAnswer = "A",
                Remark = "无",
                Type = QuestionType.Single
            }
        };
    }

}
